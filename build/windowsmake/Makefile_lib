include config_win.mk

SRC_PATH := ../../src
OBJS_DIR:= ./
SOURCE_PATH := ./resources

LIB_NAME := $(LIB_DIR)/libAVSample.lib $(LIB_DIR)/libAVSample.dll

DLL_EXPORT_SYMBOL	:= $(SOURCE_PATH)/symbols.t		  	  #导出符号文件，用于makedef生成def文件
DLL_DEF				:= $(SOURCE_PATH)/win_dll_symexp.def  #模块定义文件def
DLL_IMPLIB			:= $(LIB_DIR)/libAVSample_imp.lib 	  #引导库
DLL_PDB				:= $(LIB_DIR)/libAVSample.pdb		  #PDB文件
OUT_PDB				:= -debug -PDB:$(DLL_PDB)


#设置搜索目录
vpath	%.c  $(SRC_PATH)  $(SRC_PATH)/x86   $(SRC_PATH)/../utils/   $(SRC_PATH)/../utils/x86
vpath	%.asm  $(SRC_PATH)/x86   $(SRC_PATH)/../utils/x86
vpath	%.h  $(SRC_PATH)  $(SRC_PATH)/x86  $(SRC_PATH)/../utils/   $(SRC_PATH)/../utils/x86

#设置编译链接参数
CFLAGS  := $(EXTRA_CFLAGS)
CFLAGS	+= -Dstrtod=avpriv_strtod -Dsnprintf=avpriv_snprintf -D_snprintf=avpriv_snprintf -Dvsnprintf=avpriv_vsnprintf
LDFLAGS := $(EXTRA_LDFLAGS)
RCFLAGS := $(EXTRA_RCFLAGS)
ASMFLAGS := $(EXTRA_SFLAGS)
ARFLAGS :=	

CFLAGS += -I. -I$(SRC_PATH)
ASMFLAGS += -I. -I$(SRC_PATH)

#获取需要编译的OBJS
C_SRCS:= $(wildcard $(SRC_PATH)/*.c) $(wildcard $(SRC_PATH)/x86/*.c)
C_SRCS+= $(wildcard $(SRC_PATH)/../utils/*.c) 
A_SRCS		:= $(wildcard $(SRC_PATH)/x86/*.asm) 
A_SRCS		+= $(wildcard $(SRC_PATH)/../utils/x86/*.asm) 

C_OBJS		:= $(subst .c,.obj, $(C_SRCS))  
A_OBJS		:= $(subst .asm,.obj, $(A_SRCS))  
OBJS		:= $(filter-out %x86inc.obj %x86util.obj %emms.obj %cpuid.obj, $(C_OBJS) $(A_OBJS))

ifeq ($(platform), win32)
OBJS := $(filter-out %transpose_x86_64.obj,  $(OBJS))
endif

ifeq ($(platform), x64)
OBJS := $(filter-out %transpose_x86_32.obj,  $(OBJS))
endif

OBJS_PREFIX	:= $(addprefix $(OBJS_DIR)/, $(notdir $(OBJS)))

#编译输出
OUT = -out
LIBRARY_STATIC := $(OUT):$(filter %.lib, $(LIB_NAME))
LIBRARY_SHARD := $(OUT):$(filter %.dll, $(LIB_NAME))
#$(error $(OBJS_PREFIX))

.PHONY: all clean mkdr
all: clean mkdr $(LIB_NAME)

mkdr: #自动创建库目录LIB_DIR
	if [ ! -d $(LIB_DIR) ];then mkdir -p $(LIB_DIR); echo "$(LIB_DIR) create successfully!"; else echo "$(LIB_DIR) already exists!"; fi
	
$(filter %.lib, $(LIB_NAME)) : $(OBJS)
	$(AR) $(LIBRARY_STATIC) $(OBJS_PREFIX)
$(filter %.dll, $(LIB_NAME)) : $(OBJS)	
	makedef $(DLL_EXPORT_SYMBOL) $(OBJS_PREFIX) > $(DLL_DEF)	
#	SubWCRev ../../ $(SOURCE_PATH)/win_dll_info.t $(SOURCE_PATH)/win_dll_info.rc
	$(RC) $(RCFLAGS) -fo $(SOURCE_PATH)/win_dll_info.res $(SOURCE_PATH)/win_dll_info.rc
	$(LD) -dll -def:$(DLL_DEF)  -implib:$(DLL_IMPLIB)  $(LIBRARY_SHARD) $(OBJS_PREFIX) $(SOURCE_PATH)/win_dll_info.res $(OUT_PDB)

%.obj:%.c
#	$(error $(OBJS))
	$(CC) $(CFLAGS) -Fo $@ -c $< 		
%.obj:%.asm
	$(ASM) $(ASMFLAGS) $< #	-o $@
clean:
	rm -f $(OBJS) $(OBJS_PREFIX) $(LIB_NAME) $(DLL_IMPLIB) $(DLL_PDB) 

